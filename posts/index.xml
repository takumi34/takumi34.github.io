<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on chika</title>
		<link>https://takumi34.github.io/posts/</link>
		<description>Recent content in Posts on chika</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 11 Apr 2021 03:01:43 +0900</lastBuildDate>
		<atom:link href="https://takumi34.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>pandocを使用してreveal.jsのスライドを生成する方法</title>
			<link>https://takumi34.github.io/posts/pandoc-revealjs/</link>
			<pubDate>Sun, 11 Apr 2021 03:01:43 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/pandoc-revealjs/</guid>
			<description>簡易なスライドを作成するとき、pandocを使用してreveal.js形式のスライドを生成しているのだが、毎回その方法を忘れるので、メモとし</description>
			<content type="html"><![CDATA[<p>簡易なスライドを作成するとき、pandocを使用してreveal.js形式のスライドを生成しているのだが、毎回その方法を忘れるので、メモとしてこれを残す。</p>
<h2 id="pandocとは">pandocとは</h2>
<ul>
<li><a href="https://pandoc.org/">pandoc</a>とは、ドキュメントを様々なフォーマットに変換することのできるツールである。例えば、markdownで記入した文章をLaTexやPDFに変換するということが出来る。</li>
</ul>
<h2 id="revealjsとは">reveal.jsとは</h2>
<ul>
<li><a href="https://revealjs.com/">reveal.js</a>とは、HTMLプレゼンテーションフレームワークで、例えば<a href="https://takumi34.github.io/sample_revealjs/sample.html">こんな感じ</a>のスライドを簡単に作ることができる便利なツールである。HTMLなので、CSSを調整すれば、色々とデザインの工夫も出来る。</li>
</ul>
<h2 id="スライドの作成方法">スライドの作成方法</h2>
<ul>
<li>pandocを使うことでmarkdownをreveal.js形式に変換することが出来るので、その機能を活用する。</li>
</ul>
<p>以下で具体的な手順を述べる。</p>
<ol>
<li>まずpandocをインストールする(Arch Linux)</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">yay -S pandoc
</code></pre></div><ol start="2">
<li>reveal.jsをcloneする</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/hakimel/reveal.js.git
</code></pre></div><p>基本的には環境構築は以上で、あとはmarkdownを用意して、それをpandocで変換するだけである。</p>
<h3 id="ディレクトリ構成例">ディレクトリ構成（例）</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sample-reveal
├── Makefile
├── README.md
├── images
│   └── sample.svg
├── input.md
├── reveal.js 
├── style.css
</code></pre></div><ul>
<li>
<p>ディレクトリ構成の説明</p>
<ul>
<li>images配下にはスライドで使用する画像を配置してある</li>
<li>Makefileにはpandocの変換コマンドやgithub pagesへのアップロードなど、よく使うコマンドをまとめている</li>
<li>input.mdは変換対象となるmarkdownファイル</li>
<li>style.cssは変換する際に適用されるcss（わざわざcssファイルを用意しなくてもデフォルトのものがあるので、そのテーマを使うことも出来る）</li>
</ul>
</li>
<li>
<p>変換に必須なのはimput.mdとreveal.js</p>
</li>
</ul>
<h3 id="pandocの使い方">pandocの使い方</h3>
<ul>
<li>pandocでreveal.jsに変換する際のコマンド（例）</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pandoc -t revealjs -s -c style.css -V <span class="nv">transition</span><span class="o">=</span>fade --self-contained input.md -o index.html  --slide-level<span class="o">=</span><span class="m">2</span>
</code></pre></div><p>私はよくこのコマンドをよく使うので、これをMakefileにまとめている。</p>
<ul>
<li>pandocの詳しい使い方は<a href="https://pandoc.org/MANUAL.html">公式ガイド</a>を参照。用途に合わせて、先程のコマンドを工夫すればよい。</li>
</ul>
<p>以上のコマンドを実行すると、index.htmlが出力されるので、それをgithub pagesなどにアップロードすれば、簡単にホストすることが可能だ。</p>
<ul>
<li>例えば以下のmarkdownを変換すると</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-md" data-lang="md">% These are sample slides
% chika


<span class="gh"># sample
</span><span class="gh"></span>
hi hello

<span class="gu">## sample2
</span><span class="gu"></span>
hi
hey
<span class="gu">### sample3
</span></code></pre></div><p><a href="https://takumi34.github.io/sample_revealjs/sample.html">こんな感じ</a>
のスライドが生成できる。</p>
<p>reveal.js特有のmarkdownの記法については<a href="https://revealjs.com/markdown/">公式ガイド</a>を参照。シンタックスハイライトを入れたり、画像を挿入したり、HTMLをそのまま書き込んだりすることもできる。</p>
<h2 id="まとめ">まとめ</h2>
<ul>
<li>pandocは便利！みんな使おう。</li>
</ul>
<h4 id="参考文献">参考文献</h4>
<ul>
<li><a href="https://dev.to/berry_clione/set-up-to-convert-a-markdown-file-to-revealjs-slides-by-pandoc-58n5">https://dev.to/berry_clione/set-up-to-convert-a-markdown-file-to-revealjs-slides-by-pandoc-58n5</a></li>
<li><a href="https://mickey-happygolucky.hatenablog.com/entry/2019/04/01/153812">https://mickey-happygolucky.hatenablog.com/entry/2019/04/01/153812</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Arch Linuxでカーネルビルドをした話</title>
			<link>https://takumi34.github.io/posts/arch-kernel-build/</link>
			<pubDate>Sat, 23 May 2020 15:55:55 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/arch-kernel-build/</guid>
			<description>Arch Linuxでカーネルビルドしたので、その時のメモ。 archwikiを参考にビルドを行った。今回はtraditionalな方法を使ったので、</description>
			<content type="html"><![CDATA[<ul>
<li>Arch Linuxでカーネルビルドしたので、その時のメモ。</li>
<li><a href="https://wiki.archlinux.org/index.php/Kernel/Traditional_compilation">archwiki</a>を参考にビルドを行った。今回はtraditionalな方法を使ったので、手動でやることが多い。</li>
</ul>
<h2 id="ビルド方法">ビルド方法</h2>
<ul>
<li>まずはkernel.orgから最新のカーネルのソースを取って来てから解凍。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.6.14.tar.xz
tar xJf linux-5.6.14.tar.xz 
</code></pre></div><ul>
<li>gccのバージョンが10.1.0だと新しすぎるせいかエラーが出たので、gcc-8をインストールした。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">yay -S gcc8
<span class="nb">export</span> <span class="nv">CC</span><span class="o">=</span>gcc-8
</code></pre></div><ul>
<li>念の為、一度きれいにしておく。このコマンドで初期状態に戻せる。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">make mrproper
</code></pre></div><ul>
<li>archのデフォルトのconfigを取ってくる。他のディストリだとconfigはboot以下にあることが多いらしいがarchだと以下にある。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">zcat /proc/config.gz &gt; .config
</code></pre></div><ul>
<li>ここからカーネルのコンパイル。初め、yes ' &lsquo;とスペースを渡していたので失敗していた笑。</li>
<li>make oldconfigをすると、configを更新できる。yesを渡さないと色々設定を聞かれる。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">yes <span class="s1">&#39;&#39;</span><span class="p">|</span> make oldconfig
make &gt; ../linux5-6-14.log 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">&amp;</span>
</code></pre></div><ul>
<li>モジュールをインストール。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">make modules_install
</code></pre></div><ul>
<li>コンパイルしたカーネルをbootディレクトリにコピー。コンパイルしたカーネルはarch以下にbzImageとして生成されるので、それをboot以下にコピーする。vmlinuzという名前を慣習的に付けるらしい。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">cp -v arch/x86_64/boot/bzImage /boot/vmlinuz-chika
</code></pre></div><ul>
<li>
<p>RAMディスクの作成はarchwikiの通り。これでinitramfsができる。</p>
</li>
<li>
<p>System.mapのコピーもarchwikiの通り。</p>
</li>
<li>
<p>あとはブートローダの設定。grubを使っているので以下で新しいgrub.cfgに書き換える。</p>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">grub-mkconfig -o /boot/grub/grub.cfg
</code></pre></div><ul>
<li>これでrebootするとビルドしたカーネルで立ち上がった。</li>
</ul>
<h2 id="感想">感想</h2>
<ul>
<li>archwikiの通りにやるだけで簡単にカーネルビルドできるかと思ったら、そう簡単には行かなかった。gccのバージョンであったり、karnelのバージョンによってもうまく行かないものがあった（これはバグかも）。</li>
<li>とりあえず、これでカーネルビルドする手順と仕組みが分かったので、また一つ前進したと思う。</li>
<li>今度はカーネルのソースをいじってから、ビルドしてみて、どうなるかをやってみたいと思う。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>自然言語処理100本ノック第3章を解く（前編）</title>
			<link>https://takumi34.github.io/posts/nlp100-chapter3/</link>
			<pubDate>Wed, 06 May 2020 17:09:11 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/nlp100-chapter3/</guid>
			<description>自然言語処理100本ノック2020の第3章をやる。前編なので20から24まで。 今回は正規表現の回。 正規表現は便利なので簡単なのものはよく書く</description>
			<content type="html"><![CDATA[<ul>
<li><a href="https://nlp100.github.io/ja/">自然言語処理100本ノック2020</a>の第3章をやる。前編なので20から24まで。</li>
<li>今回は正規表現の回。</li>
<li>正規表現は便利なので簡単なのものはよく書くけれど、やっぱり難しい。プログラム合成で正規表現を合成してほしい。</li>
</ul>
<h3 id="実施した内容">実施した内容</h3>
<ul>
<li><a href="https://github.com/takumi34/nlp_100">コードはここに置いてある</a></li>
</ul>
<h4 id="20">20</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">import</span> <span class="nn">json</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;jawiki-country.json&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">article</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">if</span> <span class="s1">&#39;イギリス&#39;</span> <span class="o">==</span> <span class="n">article</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">article</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">])</span>
</code></pre></div><ul>
<li>
<p>openした後にcloseするのをよく忘れる人はwithを使うようにって大学のときに聞いた気がする。</p>
</li>
<li>
<p>これは以後の課題でも使うので、以下のようにモジュールにしておく。</p>
</li>
</ul>
<p>ch3_func.py</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">import</span> <span class="nn">json</span>

<span class="k">def</span> <span class="nf">extract_uk_text</span><span class="p">():</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;jawiki-country.json&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">article</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">if</span> <span class="s1">&#39;イギリス&#39;</span> <span class="o">==</span> <span class="n">article</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]:</span>
                <span class="k">return</span> <span class="n">article</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span>
</code></pre></div><h4 id="21">21</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">from</span> <span class="nn">modules</span> <span class="kn">import</span> <span class="n">ch3_func</span>

<span class="kn">import</span> <span class="nn">re</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">ch3_func</span><span class="o">.</span><span class="n">extract_uk_text</span><span class="p">()</span>
<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;\[\[Category:.*?\]\]&#39;</span>
<span class="n">results</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span><span class="n">text</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[[</span>Category:イギリス<span class="p">|</span>*<span class="o">]]</span>
<span class="o">[[</span>Category:イギリス連邦加盟国<span class="o">]]</span>
<span class="o">[[</span>Category:英連邦王国<span class="p">|</span>*<span class="o">]]</span>
<span class="o">[[</span>Category:G8加盟国<span class="o">]]</span>
<span class="o">[[</span>Category:欧州連合加盟国<span class="p">|</span>元<span class="o">]]</span>
<span class="o">[[</span>Category:海洋国家<span class="o">]]</span>
<span class="o">[[</span>Category:現存する君主国<span class="o">]]</span>
<span class="o">[[</span>Category:島国<span class="o">]]</span>
<span class="o">[[</span>Category:1801年に成立した国家・領域<span class="o">]]</span>
</code></pre></div><ul>
<li>正規表現登場。</li>
<li>findallは便利だ。</li>
</ul>
<h4 id="22">22</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">from</span> <span class="nn">modules</span> <span class="kn">import</span> <span class="n">ch3_func</span>

<span class="kn">import</span> <span class="nn">re</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">ch3_func</span><span class="o">.</span><span class="n">extract_uk_text</span><span class="p">()</span>
<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;\[\[Category:(.*?)(?:\|.*)?\]\]&#39;</span>
<span class="n">results</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span><span class="n">text</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">イギリス
イギリス連邦加盟国
英連邦王国
G8加盟国
欧州連合加盟国
海洋国家
現存する君主国
島国
1801年に成立した国家・領域
</code></pre></div><ul>
<li>&lsquo;|*&lsquo;みたいなのが付いているのを正規表現の&rsquo;?:&lsquo;で外した。</li>
</ul>
<h4 id="23">23</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">from modules import ch3_func

import re

<span class="nv">text</span> <span class="o">=</span> ch3_func.extract_uk_text<span class="o">()</span>
<span class="nv">pattern</span> <span class="o">=</span> <span class="s1">&#39;(==+)(.*?)==+&#39;</span>
<span class="nv">results</span> <span class="o">=</span> re.findall<span class="o">(</span>pattern, text<span class="o">)</span>

<span class="k">for</span> i in results:
    <span class="nv">level</span> <span class="o">=</span> i<span class="o">[</span>0<span class="o">]</span>.count<span class="o">(</span><span class="s1">&#39;=&#39;</span><span class="o">)</span> - <span class="m">1</span>
    <span class="nv">section_name</span> <span class="o">=</span> i<span class="o">[</span>1<span class="o">]</span>
    print<span class="o">(</span><span class="s1">&#39;%d: %s&#39;</span> % <span class="o">(</span>level, section_name<span class="o">))</span>
</code></pre></div><h4 id="24">24</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">from modules import ch3_func

import re

<span class="nv">text</span> <span class="o">=</span> ch3_func.extract_uk_text<span class="o">()</span>
<span class="nv">pattern</span> <span class="o">=</span> <span class="s1">&#39;\[\[ファイル:(.*?)(?:\|.*)?\]\]&#39;</span>
<span class="nv">results</span> <span class="o">=</span> re.findall<span class="o">(</span>pattern,text<span class="o">)</span>

<span class="k">for</span> i in results:
  print<span class="o">(</span>i<span class="o">)</span>
</code></pre></div><ul>
<li>22とやってることは同じ</li>
</ul>
<h2 id="感想">感想</h2>
<ul>
<li>
<p>正規表現は正直難しい。今のところはそこまで複雑じゃないが、複雑になればなるほど人間には解読不能になると思っている&hellip;</p>
</li>
<li>
<p>まだ『詳説　正規表現』を読んだことがないので、これを機会に読みたいと思う。</p>
</li>
<li>
<p>もっと良いやり方があったらコメントで教えてください。</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>メインマシンをArch Linuxに移行した話とその環境構築メモ</title>
			<link>https://takumi34.github.io/posts/archlinux-memo/</link>
			<pubDate>Mon, 04 May 2020 10:50:39 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/archlinux-memo/</guid>
			<description>メインマシンとしてUbuntuを愛用していたのだが、つい先日Ubuntu20.04がLTS版として出たので、バージョンを上げたところ、調子が</description>
			<content type="html"><![CDATA[<ul>
<li>メインマシンとしてUbuntuを愛用していたのだが、つい先日Ubuntu20.04がLTS版として出たので、バージョンを上げたところ、調子が悪くなった（networkmanagerが問題なのではないかと思うのだけど、原因不明。起動してしばらくするとネットに繋がらなくなるし、ターミナルからコマンドも実行できなくなる。再起動もできなくなるという感じ。）ので、これを機にArch Linuxへ乗り換えることにした。</li>
</ul>
<h2 id="arch-linuxとは">Arch Linuxとは</h2>
<ul>
<li>Simplicityを謳っているOSで、インストール時は本当に何も入っていないというぐらい何も入っていない。</li>
<li>ローリングアップデートの方式なので、常にOSを最新の状態にできる。</li>
</ul>
<p>(今思えば、UbuntuはUSBを挿してインストールすればほぼ環境構築が終わったようなものだったのだなと思う。)</p>
<h2 id="環境構築メモ">環境構築メモ</h2>
<ul>
<li>
<p>基本的には<a href="https://wiki.archlinux.org/index.php/installation_guide">Arch wikiのInstallation guide</a>を読んでその通りにやった。</p>
</li>
<li>
<p>大まかに重要そうなところ、つまずいたところを以下に記す。</p>
</li>
</ul>
<h3 id="パーティション">パーティション</h3>
<ul>
<li>パーティションは/dev/nvme0n1と/dev/nvme0n2でそれぞれEFIとrootにした。</li>
<li>gdiskでパーティションを切った。</li>
</ul>
<h3 id="フォーマット">フォーマット</h3>
<ul>
<li>EFIはFAT32で、rootはext4でフォーマット。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkfs.vfat -F32 /dev/nvme0n1
mkfs.ext4 /dev/nvme0n2
</code></pre></div><h2 id="マウント">マウント</h2>
<ul>
<li>特になし</li>
</ul>
<h2 id="ベースシステムのインストール">ベースシステムのインストール</h2>
<ul>
<li>pacstarpでインストールできる。ここはarch wikiの通りにやった。まとめて他のも入れられるが、ここで入れすぎると何か起きたときに問題の切り分けができないので最小限に留めておくのがいいらしい。</li>
<li>ここでLinuxカーネルやファームウェアなどをインストールする。</li>
</ul>
<h3 id="ブートローダ">ブートローダ</h3>
<ul>
<li>
<p>GRUBを使った。</p>
</li>
<li>
<p>UEFIのブートローダとしてはsystemd-bootとGRUBが有名どころだと思うけど、どっちの方がいいのかは正直分からない。</p>
</li>
<li>
<p>GRUBの使い方もArchwikiを参照するとよい。</p>
</li>
<li>
<p>この後は再起動してちゃんと動けば、インストール成功。</p>
</li>
<li>
<p><a href="https://qiita.com/panakuma/items/471643138db11335d542">この記事も参考になった</a></p>
</li>
<li>
<p>ただこの時点ではデスクトップ環境が入ってないので、それをこれから入れていく。</p>
</li>
</ul>
<h3 id="デスクトップ">デスクトップ</h3>
<ul>
<li>xfceを使った。</li>
<li>UbuntuのときはGNOMEを使っていたが、以前から気になっていたxfceにした。
（本当はi3wmにしたいのだけど、操作が難しいので、一旦保留）</li>
</ul>
<h3 id="ディスプレイマネージャ">ディスプレイマネージャ</h3>
<ul>
<li>
<p>lightdmにした。</p>
</li>
<li>
<p><a href="https://qiita.com/Hayao0819/items/7784178c7fd568291905">テーマはこれを参考にした</a></p>
</li>
<li>
<p><a href="https://wiki.archlinux.jp/index.php/LightDM#.E8.87.AA.E5.8B.95.E3.83.AD.E3.82.B0.E3.82.A4.E3.83.B3.E3.82.92.E6.9C.89.E5.8A.B9.E3.81.AB.E3.81.99.E3.82.8B">自動ログインの設定はこれ</a></p>
</li>
<li>
<p>実はlightdmを入れたあとに再起動したら、&ldquo;can&rsquo;t find session&quot;のような文言が表示されてログインできないという事象が発生した。でも、これはただこの時点でxfceを入れ忘れていたから、デスクトップのセッションが見つからないというだけだった（これに気づかず時間を消費した&hellip;)</p>
</li>
</ul>
<h3 id="その他の環境構築">その他の環境構築</h3>
<h4 id="スピーカマイクの設定">スピーカ、マイクの設定</h4>
<ul>
<li>pulseaudioを入れた。</li>
<li>これも<a href="https://wiki.archlinux.jp/index.php/PulseAudio">Archwiki</a>を見るといい。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">yay -S pulseaudio pavucontrol
</code></pre></div><ul>
<li>スピーカとしてディスプレイのスピーカが認識されていなかったのだけど、これもarchwikiを参考に設定した。</li>
<li>/etc/pulse/default.paに設定を書いていく。</li>
<li>set-default-sinkとset-default-sourceにモニターのスピーカ設定を書く。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">### Make some devices default</span>
set-default-sink alsa_output.pci-0000_00_1f.3.hdmi-stereo
<span class="c1">#set-default-source input</span>
set-default-source alsa_output.pci-0000_00_1f.3.hdmi-stereo.monitor
</code></pre></div><ul>
<li>マイクも認識されていなかったので、<a href="https://wiki.archlinux.jp/index.php/PulseAudio/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0#.E3.83.9E.E3.82.A4.E3.82.AF.E3.81.8C_PulseAudio_.E3.81.8B.E3.82.89.E8.AA.8D.E8.AD.98.E3.81.95.E3.82.8C.E3.81.AA.E3.81.84">これまたArchwikiを参考に解決</a></li>
</ul>
<h4 id="ディスプレイ設定">ディスプレイ設定</h4>
<ul>
<li>映像を流すとディスプレイに線が入ったりしたので、refresh rateの設定の問題か？と思い、Xの設定やdisplay.xmlなどをいじったりしていたが、結局はドライバーを入れたら解決した。</li>
<li>intelなのでこれ</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pacman -Ss xf86-video
</code></pre></div><h4 id="日本語環境">日本語環境</h4>
<ul>
<li>fcitx-mozcを入れた。</li>
<li>ログイン時に以下を流す。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">fcitx-autostart
</code></pre></div><ul>
<li>日本語のフォントも入れておく。</li>
</ul>
<h3 id="kindle-for-pcのインストール">kindle for PCのインストール</h3>
<ul>
<li>基本的にはArch User Repositoryを使えば、vscodeもchromeも大体簡単にインストールできるのだけど、kindleはそうは行かないので、wine経由で入れる。</li>
<li>wine-5.7でwineの中のwindowsのバージョンをwindows8.1にして、kindleのkindle-for-pc-1-17-44170.exeを入れる。</li>
<li>以上のバージョンを合わせないとうまくインストールができない。特に、kindleのインストーラーのバージョンを色々試した結果、1-17-44170ならうまく入った。</li>
<li>Ubuntuでも同じことをやったのだけど、バージョンを忘れたので、何度も試すことになったので、これもメモしておく。</li>
</ul>
<h3 id="wifi設定">wifi設定</h3>
<ul>
<li>これもArchwikiを読む。<a href="https://wiki.archlinux.jp/index.php/NetworkManager">NetworkManager</a></li>
<li>nmcliでコマンドが打てる。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">nmcli dev wifi connect &lt;name&gt; password &lt;password&gt;
</code></pre></div><ul>
<li>xfceだと以下をインストールしておく。<a href="https://wiki.archlinux.jp/index.php/NetworkManager#Xfce">ここで紹介されている</a></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pacman -S network-manager-applet xfce4-notifyd gnome-keyring
</code></pre></div><h2 id="まとめ">まとめ</h2>
<ul>
<li>環境構築メモとして、これを書き残しておく。</li>
<li>今回、Arch Linuxの環境構築をして、デスクトップOSの仕組みについて詳しくなった（気がする）。</li>
<li>Ubuntuを使っていたときはインストール時から様々な環境がすでに込み込みなので、特に何も考えずすぐ使えるのだけど、Arch Linuxは初めはほんとに何も入ってない。なので、自分で好きなものをどんどん入れていってカスタマイズしていくので、裏側でどういうものが動いているかというのがよく分かる。</li>
<li>Arch wikiは凄い。ほんとに色々載っているので非常に助かる。</li>
</ul>
<p><em><strong>「<a href="https://wiki.archlinux.org/index.php/Arch_is_the_best">Arch Linux最高。</a>」という言葉で締めくくりたい。万人におすすめできるOSである。</strong></em></p>
]]></content>
		</item>
		
		<item>
			<title>自然言語処理100本ノック第2章を解く</title>
			<link>https://takumi34.github.io/posts/nlp100-chapter2/</link>
			<pubDate>Fri, 01 May 2020 11:09:14 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/nlp100-chapter2/</guid>
			<description>自然言語処理100本ノック2020を第1章に引き続き、第2章をやる。今回はUNIXコマンドでテキストの処理をするという章。 普段からgrepと</description>
			<content type="html"><![CDATA[<ul>
<li><a href="https://nlp100.github.io/ja/">自然言語処理100本ノック2020</a>を第1章に引き続き、第2章をやる。今回はUNIXコマンドでテキストの処理をするという章。</li>
<li>普段からgrepとかsedとかはよく使っているが、改めて今回やってみるとパラメータの指定など、気付きが多かった。</li>
</ul>
<h3 id="実施した内容">実施した内容</h3>
<ul>
<li><a href="https://github.com/takumi34/nlp_100">コードはここに置いてある</a></li>
</ul>
<h4 id="10">10</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">wc -l &lt; popular-names.txt
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="m">2780</span>
</code></pre></div><h4 id="11">11</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">tr  <span class="s1">&#39;\t&#39;</span> <span class="s1">&#39; &#39;</span> &lt; popular-names.txt &gt; popular-names2.txt 
</code></pre></div><h4 id="12">12</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">cut -d <span class="s1">&#39; &#39;</span> -f <span class="m">1</span> popular-names2.txt &gt; col1.txt
cut -d <span class="s1">&#39; &#39;</span> -f <span class="m">2</span> popular-names2.txt &gt; col2.txt
</code></pre></div><h4 id="13">13</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">paste  col1.txt col2.txt &gt; marge.txt
</code></pre></div><h4 id="14">14</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">head -n <span class="m">4</span> popular-names.txt
</code></pre></div><h4 id="15">15</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">tail -n <span class="m">4</span> popular-names.txt
</code></pre></div><h4 id="16">16</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">split -n <span class="m">3</span> -d popular-names.txt split-
</code></pre></div><ul>
<li>popular-names.txtを行単位で三分割して、split-00.txtとsplit-01.txtとsplit-02.txtを作成する。</li>
</ul>
<h4 id="17">17</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">cut -f <span class="m">1</span> popular-names.txt <span class="p">|</span> sort <span class="p">|</span> uniq
</code></pre></div><ul>
<li>uniqをかける前にsortする。C++でやりなれた操作。（uniqueする前にsortを忘れがちなので、そのマクロを組んでいるぐらい笑。）</li>
</ul>
<h4 id="18">18</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">sort -rk <span class="m">3</span>  popular-names.txt
</code></pre></div><h4 id="19">19</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">cut -f <span class="m">1</span> popular-names.txt <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> sort -nrk <span class="m">1</span> <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span>
</code></pre></div><ul>
<li>uniq -cでそれぞれの数が出せるので、それをsort。</li>
<li>sortしただけだと、数値、テキストが出力されるので、awkで2列目だけを出力。</li>
</ul>
<h3 id="感想">感想</h3>
<ul>
<li>
<p>『UNIXという考え方』という本を昔読んだけれど、UNIXコマンドにはそのUNIX哲学が強く現れていると思う。パイプを使って、それぞれのコマンドをつなぎ合わせることによって、非常に強力な処理が可能となる。大昔に作られたものが現代でもこれほど便利に使えるというのはやはり凄いことだ。今回改めてそう感じた。</p>
</li>
<li>
<p>もっと良いやり方があったらコメントで教えてください。</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>自然言語処理100本ノック第1章を解く</title>
			<link>https://takumi34.github.io/posts/nlp100-chapter1/</link>
			<pubDate>Thu, 30 Apr 2020 16:25:34 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/nlp100-chapter1/</guid>
			<description>自然言語処理100本ノック2020が公開されたので、解いてみた。 2015年のバージョンは昔少しだけ解いたことがあったが、全部やってたわけでは</description>
			<content type="html"><![CDATA[<ul>
<li><a href="https://nlp100.github.io/ja/">自然言語処理100本ノック2020</a>が公開されたので、解いてみた。</li>
<li>2015年のバージョンは昔少しだけ解いたことがあったが、全部やってたわけではないので、これからやっていきたいと思う。</li>
</ul>
<h3 id="実施した内容">実施した内容</h3>
<ul>
<li><a href="https://github.com/takumi34/nlp_100">コードはここに置いてある</a></li>
</ul>
<h4 id="00">00</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">print</span><span class="p">(</span><span class="s1">&#39;stressed&#39;</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">desserts
</code></pre></div><h4 id="01">01</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;パタトクカシーー&#39;</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">パトカー
</code></pre></div><h4 id="02">02</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;パトカー&#39;</span>
<span class="n">b</span> <span class="o">=</span> <span class="s1">&#39;タクシー&#39;</span>
<span class="n">c</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>


</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">パタトクカシーー
</code></pre></div><h4 id="03">03</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.&#39;</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
<span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)):</span>
    <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9<span class="o">]</span>
</code></pre></div><h4 id="04">04</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.&#39;</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
<span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">19</span><span class="p">]:</span>
        <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">],</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">{</span><span class="s1">&#39;H&#39;</span>: 1, <span class="s1">&#39;He&#39;</span>: 2, <span class="s1">&#39;Li&#39;</span>: 3, <span class="s1">&#39;Be&#39;</span>: 4, <span class="s1">&#39;B&#39;</span>: 5, <span class="s1">&#39;C&#39;</span>: 6, <span class="s1">&#39;N&#39;</span>: 7, <span class="s1">&#39;O&#39;</span>: 8, <span class="s1">&#39;F&#39;</span>: 9, <span class="s1">&#39;Ne&#39;</span>: 10, <span class="s1">&#39;Na&#39;</span>: 11, <span class="s1">&#39;Mi&#39;</span>: 12, <span class="s1">&#39;Al&#39;</span>: 13, <span class="s1">&#39;Si&#39;</span>: 14, <span class="s1">&#39;P&#39;</span>: 15, <span class="s1">&#39;S&#39;</span>: 16, <span class="s1">&#39;Cl&#39;</span>: 17, <span class="s1">&#39;Ar&#39;</span>: 18, <span class="s1">&#39;K&#39;</span>: 19, <span class="s1">&#39;Ca&#39;</span>: 20<span class="o">}</span>
</code></pre></div><h4 id="05">05</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">ngram</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="nb">list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">tsize</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">tsize</span> <span class="o">-</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="nb">list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">n</span><span class="p">])</span>
    <span class="k">return</span> <span class="nb">list</span>

<span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;I am an NLPer&#34;</span>
<span class="k">print</span><span class="p">(</span><span class="n">ngram</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>  <span class="c1">#文字bi-gram</span>
<span class="k">print</span><span class="p">(</span><span class="n">ngram</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">),</span> <span class="mi">2</span><span class="p">))</span>  <span class="c1">#単語bi-gram</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span><span class="s1">&#39;I &#39;</span>, <span class="s1">&#39; a&#39;</span>, <span class="s1">&#39;am&#39;</span>, <span class="s1">&#39;m &#39;</span>, <span class="s1">&#39; a&#39;</span>, <span class="s1">&#39;an&#39;</span>, <span class="s1">&#39;n &#39;</span>, <span class="s1">&#39; N&#39;</span>, <span class="s1">&#39;NL&#39;</span>, <span class="s1">&#39;LP&#39;</span>, <span class="s1">&#39;Pe&#39;</span>, <span class="s1">&#39;er&#39;</span><span class="o">]</span>
<span class="o">[[</span><span class="s1">&#39;I&#39;</span>, <span class="s1">&#39;am&#39;</span><span class="o">]</span>, <span class="o">[</span><span class="s1">&#39;am&#39;</span>, <span class="s1">&#39;an&#39;</span><span class="o">]</span>, <span class="o">[</span><span class="s1">&#39;an&#39;</span>, <span class="s1">&#39;NLPer&#39;</span><span class="o">]]</span>
</code></pre></div><h4 id="06">06</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">ngram</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="nb">list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">tsize</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">tsize</span> <span class="o">-</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="nb">list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">n</span><span class="p">])</span>
    <span class="k">return</span> <span class="nb">list</span>


<span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;paraparaparadise&#34;</span>
<span class="n">b</span> <span class="o">=</span> <span class="s2">&#34;paragraph&#34;</span>

<span class="n">abi</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">ngram</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="n">bbi</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">ngram</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">abi</span> <span class="o">|</span> <span class="n">bbi</span><span class="p">)</span>  <span class="c1">#和集合</span>
<span class="k">print</span><span class="p">(</span><span class="n">abi</span> <span class="o">&amp;</span> <span class="n">bbi</span><span class="p">)</span>  <span class="c1">#積集合</span>
<span class="k">print</span><span class="p">(</span><span class="n">abi</span> <span class="o">-</span> <span class="n">bbi</span><span class="p">)</span>  <span class="c1">#差集合</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;ok&#34;</span> <span class="k">if</span> <span class="s2">&#34;se&#34;</span> <span class="ow">in</span> <span class="p">(</span><span class="n">abi</span> <span class="ow">or</span> <span class="n">bbi</span><span class="p">)</span> <span class="k">else</span> <span class="s2">&#34;no&#34;</span><span class="p">)</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">{</span><span class="s1">&#39;ap&#39;</span>, <span class="s1">&#39;ag&#39;</span>, <span class="s1">&#39;ad&#39;</span>, <span class="s1">&#39;gr&#39;</span>, <span class="s1">&#39;ar&#39;</span>, <span class="s1">&#39;se&#39;</span>, <span class="s1">&#39;ph&#39;</span>, <span class="s1">&#39;ra&#39;</span>, <span class="s1">&#39;di&#39;</span>, <span class="s1">&#39;pa&#39;</span>, <span class="s1">&#39;is&#39;</span><span class="o">}</span>
<span class="o">{</span><span class="s1">&#39;pa&#39;</span>, <span class="s1">&#39;ap&#39;</span>, <span class="s1">&#39;ra&#39;</span>, <span class="s1">&#39;ar&#39;</span><span class="o">}</span>
<span class="o">{</span><span class="s1">&#39;di&#39;</span>, <span class="s1">&#39;is&#39;</span>, <span class="s1">&#39;ad&#39;</span>, <span class="s1">&#39;se&#39;</span><span class="o">}</span>
ok
</code></pre></div><h4 id="07">07</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">temp</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&#34;</span><span class="si">%s</span><span class="s2">時の</span><span class="si">%s</span><span class="s2">は</span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">temp</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="s2">&#34;気温&#34;</span><span class="p">,</span> <span class="mf">22.4</span><span class="p">))</span>

</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">12時の気温は22.4
</code></pre></div><h4 id="08">08</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">cipher</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">islower</span><span class="p">()):</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="mi">219</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="n">i</span><span class="p">)))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>


<span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;chika chika&#34;</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">xsrpz xsrpz
chika chika
</code></pre></div><h4 id="09">09</h4>
<ul>
<li>コード</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">import</span> <span class="nn">random</span>


<span class="k">def</span> <span class="nf">typogly</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">s</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span> <span class="o">+</span> <span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
        <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>


<span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .&#34;</span>

<span class="n">res</span> <span class="o">=</span> <span class="s2">&#34; &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">typogly</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">()])</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div><ul>
<li>出力</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">I cdlun’ot bivelee that I colud atlucaly uasrenndtd what I was reidang : the peahnemonl poewr of the haumn mind .
</code></pre></div><h3 id="感想">感想</h3>
<ul>
<li>久々にPythonを書くと、色々と気付きが多かった。あと、やはり動的型付け言語はつらいものがあるので、出来れば書きたくないなと笑。</li>
<li>Python的な内包表記は極力書かないようにした。キレイに書けそうだなというときは使ったけれど、基本的には普通に書いた方が読みやすいと思っているので。</li>
<li>もっと良い書き方あったらコメントで教えてください。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>JMOOCでOSのコースを修了した話</title>
			<link>https://takumi34.github.io/posts/jmooc-os/</link>
			<pubDate>Sun, 26 Apr 2020 09:31:12 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/jmooc-os/</guid>
			<description>JMOOCとは 流行りのMOOCの日本版。 修了証 受けたコース 「オペレーティングシステム2020」を受けた。 内容としては、OSの知識を俯瞰するよ</description>
			<content type="html"><![CDATA[<h2 id="jmoocとは">JMOOCとは</h2>
<ul>
<li>流行りのMOOCの日本版。
<figure class="center">
    <img src="/images/certificationOS.PNG" width="320" height="640"/> <figcaption>
            <h4>修了証</h4>
        </figcaption>
</figure>
</li>
</ul>
<h2 id="受けたコース">受けたコース</h2>
<ul>
<li>「オペレーティングシステム2020」を受けた。</li>
<li>内容としては、OSの知識を俯瞰するような感じで、メモリ管理やプロセス、ファイルシステムなど基本を押さえた内容だった。</li>
</ul>
<h2 id="受けた理由">受けた理由</h2>
<ul>
<li>最近Linuxカーネルのソースコードを読んでいるけれど、よく分からない単語や知らない仕組みがあり、やっぱり難しい。そういう意味で、OSの基礎を再度固めたかったから。</li>
</ul>
<h2 id="感想">感想</h2>
<ul>
<li>事前にOSの教科書を読んだり、OS自作の本も読んでいたので、特に問題なく受講できた。</li>
<li>全て映像授業なのかと思っていたが、ほとんどはPDFの資料であった。そのレジュメには誤字があったりもしたが、内容の質は良かったと思う。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>CourseraでGCPのコースを修了した話</title>
			<link>https://takumi34.github.io/posts/gcp-coursera/</link>
			<pubDate>Sat, 04 Jan 2020 04:15:28 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/gcp-coursera/</guid>
			<description>とりあえず修了したのは以下 Google Cloud Platform Fundamentals: Core Infrastructure 日本語版 Essential Cloud Infrastructure: Foundation 日本語版 Architecting with Google Kubernetes Engine: Foundations 日本語版 Courseraとは オンラインで色々な授業が受けられるサー</description>
			<content type="html"><![CDATA[<ul>
<li>とりあえず修了したのは以下
<ul>
<li>Google Cloud Platform Fundamentals: Core Infrastructure 日本語版</li>
<li>Essential Cloud Infrastructure: Foundation 日本語版</li>
<li>Architecting with Google Kubernetes Engine: Foundations 日本語版</li>
</ul>
</li>
</ul>
<h2 id="courseraとは">Courseraとは</h2>
<ul>
<li>オンラインで色々な授業が受けられるサービス。有名なので知ってる人も多いはず。</li>
<li>ただやる気がないと全然続かないのでそこが一番難しいと思う。かく言う私も昔受けてみたものの途中で挫折したことがある。</li>
<li>講座を修了すると修了証が貰える。例えばこういう感じ。
<figure class="center">
    <img src="/images/coursera_k8s.png" width="320" height="640"/> <figcaption>
            <h4>修了証</h4>
        </figcaption>
</figure>
</li>
</ul>
<h2 id="受けた理由">受けた理由</h2>
<ul>
<li>多分GCPを勉強するにはCourseraを受けるのが現時点では一番良い方法なのではないだろうか。Googleが公式に提供しているものなので講座の内容も信頼できるし、Qwiklabsをやることによって実際にGCPを動かすこともできるので至れり尽くせりだと言える。</li>
</ul>
<h2 id="内容">内容</h2>
<ul>
<li>講義の動画を見る→問題を解く→Qwiklabsで実際にGCPを触わる、ということの繰り返し。</li>
</ul>
<h2 id="感想">感想</h2>
<ul>
<li>同じことの繰り返しで途中で飽きるので、気を強く持つのが大事。</li>
<li>Qwiklabsのシステムは素晴らしいのだが、途中にあるテストに落ちたときに何が原因で落ちたのかがわからないので、そこを改善してほしい。</li>
<li>今回受けた講座は日本語版のものなのだが、やはり翻訳があまり良くない部分が多い。なので結局英語で聞いて読んでいた。</li>
</ul>
<h1 id="今後">今後</h1>
<ul>
<li>GCPの講座は他にもたくさんあるので、暇なときにまた受けようと思う。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Line Dev Day 2019に行ってきた話</title>
			<link>https://takumi34.github.io/posts/line-dev-day-2019/</link>
			<pubDate>Fri, 22 Nov 2019 04:40:32 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/line-dev-day-2019/</guid>
			<description>Line Dev Day とは LINE DEV DAY会場 正式名称は LINE DEVELOPER DAY、LINE 社のカンファレンスで 2015 年から開催されている。今年は 11/21-11/22 にお台場で開催された。私は今回両日</description>
			<content type="html"><![CDATA[<h2 id="line-dev-day-とはhahahugoshortcode-s0-hbhb">Line Dev Day とは<figure class="center">
    <img src="/images/line-dev-day.jpg" width="320" height="640"/> <figcaption>
            <h4>LINE DEV DAY会場</h4>
        </figcaption>
</figure>
</h2>
<ul>
<li>正式名称は LINE DEVELOPER DAY、LINE 社のカンファレンスで 2015 年から開催されている。今年は 11/21-11/22 にお台場で開催された。私は今回両日ともに参加した。私は以前LINEにエンジニアインターンに参加していたということもあってLine Dev Dayに参加したいと思っていた。</li>
</ul>
<h2 id="まず驚いたこと">まず驚いたこと</h2>
<ul>
<li>受付では顔認証による参加者確認が行われていた。私は LINE アプリによる確認を行うレーンに並んで板が、やはり顔認証確認の方が受付のスピードが早かったように感じた。精度も良いのではないだろうか。</li>
</ul>
<h2 id="カンファレンスの内容について">カンファレンスの内容について</h2>
<ul>
<li>発表は、キーノート、セッション、ブース、ポスター発表、各種ハンズオンという構成になっている。</li>
<li>両日とも午前中はキーノート、午後にセッションなどがある。セッションには各業界の有名人を招待しているようだった。例えば、甘利さんや徳丸さんが招待されていた。</li>
<li>今回、二日間で私は一回２時間のハンズオンを２つ受けたのでセッションはあまり聞けなかった。</li>
<li>以下で私が聞いて面白かったと思うセッションやハンズオンについて紹介したいと思う。</li>
</ul>
<h2 id="ハンズオン">ハンズオン</h2>
<h3 id="learning-session-について">Learning Session について</h3>
<ul>
<li>一日目には「仕事をよりクリエイティブにするための『Learning Session』の実践」というハンズオンを受けた。</li>
<li>Learning Session とは LINE 社内で行っているモブプロの手法を使った勉強会のことを言うらしい。私は普段からペアプロやモブプロを行っており、自分としても好きな XP の手法なので参加した。Learning Session については下記のブログに纏められているので気になった方は読むといいだろう。(<a href="https://engineering.linecorp.com/ja/blog/recommend-learning-session/">仕事をよりクリエイティブにするための「Learning Session」ノススメ
</a>)</li>
<li>ハンズオンがスタートしてからモブプロの軽い説明があり、それから各チームに別れた。チームは各々がやってみたいこと（例えば、circle ci や flutter や k8s など）を出し合い、自分の入りたいチームに入るというものだった。私は flutter を始めようと思っていたので flutter のチームに参加した。</li>
<li>それから１時間半ほどモブプロを行って、結果的には環境構築が終わって hello world が成功したところで終わってしまった。ダウンロードなどにどうしても時間が掛かってしまうので、その間は Dart や flutter のチュートリアルを眺めたり、他のフレームワーク（React や Xamarin など）の違いなどを調べていた。</li>
<li>ハンズオンの講師の方に「モブプログラミング・ベストプラクティス」を読んで実際にモブプロをしているという話をすると、モブプロ創始者の一人である Chris Lucian さんの論文を読むと良いと教えて頂いたので今度読もうと思う。</li>
</ul>
<h3 id="armeria-について">Armeria について</h3>
<ul>
<li>二日目には「Armeria と WebFlux でマイクロサービスを強化」のハンズオンを受けた。</li>
<li>Armeria とは LINE の OSS で非同期 RPC/API のためのライブラリーだ(<a href="https://github.com/line/armeria">https://github.com/line/armeria</a>)</li>
<li>LINE DEV DEY でも Armeria に関するセッションが複数行われており、Slack でも採用されているようだ。</li>
<li>ハンズオンの内容としては、実際に Spring Boot のプロジェクトに Armeria を組み込んで使ってみるという内容だった。(<a href="https://github.com/joonhaeng/line-devday-2019-hands-on-src">その際のデモコードのリポジトリ</a>)</li>
<li>Armeriaのstarterが用意されているので比較的簡単に SpringのDIに組み込めるという印象だ。</li>
<li>Springのecosystemと共存する形でArmeriaを使ってgRPCやThriftをよしなに非同期にできるというのがメリットのようだ。Armeriaはh2cもデフォルトでサポートしているらしい。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="c1">// build.gradle
</span><span class="c1"></span><span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">implementation</span> <span class="s1">&#39;com.linecorp.armeria:armeria-spring-boot-webflux-starter&#39;</span>
<span class="o">}</span>

<span class="n">dependencyManagement</span> <span class="o">{</span>
	<span class="n">imports</span> <span class="o">{</span>
		<span class="n">mavenBom</span> <span class="s1">&#39;com.linecorp.armeria:armeria-bom:0.96.0&#39;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>JSUGで発表をした話</title>
			<link>https://takumi34.github.io/posts/jsug_springone/</link>
			<pubDate>Fri, 15 Nov 2019 03:43:42 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/jsug_springone/</guid>
			<description>JSUG とは日本 Spring ユーザ会のことを指す。日本の Spring コミュニティである。私はそこで開かれた Spring One2019 報告会で発表した。 Spring One とは Spring One とは Pivotal 社の主催する世界最大</description>
			<content type="html"><![CDATA[<ul>
<li>JSUG とは日本 Spring ユーザ会のことを指す。日本の Spring コミュニティである。私はそこで開かれた Spring One2019 報告会で発表した。</li>
</ul>
<h2 id="spring-one-とは">Spring One とは</h2>
<ul>
<li>Spring One とは Pivotal 社の主催する世界最大の Spring に関するカンファレンスだ。そこでは Spring Framework など Spring について様々な発表が行われる。私は今回これに参加した。今年はアメリカの Austin で開催された。</li>
</ul>
<h2 id="jsug-での発表">JSUG での発表</h2>
<ul>
<li>Spring One では Kotlin や Azure Spring Cloud など様々なセッションを聞いた。特に印象に残ったセッションとして Spring Initializr のセッションがあった( <a href="https://www.slideshare.net/Pivotal/creating-the-second-best-place-on-the-internet-with-spring-initializr/Pivotal/creating-the-second-best-place-on-the-internet-with-spring-initializr">Creating &ldquo;The Second Best Place on the Internet&rdquo; with Spring Initializr</a>)。この内容をもとに JSUG で発表をした。</li>
<li>内容としては、Spring Initializr の発展の歴史と Spring Initlizr のカスタマイズの話である。</li>
<li>デモコードは以下にある。README を読めば大体分かるはず。(<a href="https://github.com/takumi34/custom-spring-initializr">https://github.com/takumi34/custom-spring-initializr</a>)</li>
</ul>
<ul>
<li><a href="https://www.slideshare.net/apkiban/spring-initializr">発表したスライド</a></li>
</ul>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/t4XKHDRMrhP0Uy" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/apkiban/spring-initializr" title="Spring Initializrをハックする-カスタマイズを通してその内部実装を覗く" target="_blank">Spring Initializrをハックする-カスタマイズを通してその内部実装を覗く</a> </strong> from <strong><a href="https://www.slideshare.net/apkiban" target="_blank">apkiban</a></strong> </div>
]]></content>
		</item>
		
		<item>
			<title>Golang10周年記念パーティーに行ってきた話</title>
			<link>https://takumi34.github.io/posts/gotunes10/</link>
			<pubDate>Tue, 12 Nov 2019 08:41:11 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/gotunes10/</guid>
			<description>Go Relese 10周年記念パーティに行ってきた 場所はメルカリで行われた。 Go Release 10 Year Anniversary Party in Tokyo Goの歴史やGoコミュニティーの歴史を振り返るようなセッション</description>
			<content type="html"><![CDATA[<h1 id="go-relese-10周年記念パーティに行ってきた">Go Relese 10周年記念パーティに行ってきた</h1>
<ul>
<li>場所はメルカリで行われた。</li>
<li><a href="https://gocon.connpass.com/event/153665/">Go Release 10 Year Anniversary Party in Tokyo</a></li>
<li>Goの歴史やGoコミュニティーの歴史を振り返るようなセッションが多かった。</li>
</ul>
<h2 id="セッションの内容">セッションの内容</h2>
<ul>
<li>yoshiさんやtenntennさんの発表があった。</li>
<li>特にyoshiさんの発表は面白かった。
<ul>
<li>内容としては、Goの歴史を振り返るもので、ALGOLから始まり、concurrencyの歴史、Goを作った人たちが出会ったときの話、Goのリリースの歴史など、知らないことが多かった。</li>
<li>そのうちスライドの資料が公開されると思うので見ておくと良いと思う。</li>
</ul>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Test</title>
			<link>https://takumi34.github.io/posts/test/</link>
			<pubDate>Sat, 08 Jun 2019 18:50:57 +0900</pubDate>
			
			<guid>https://takumi34.github.io/posts/test/</guid>
			<description>test ブログ始めました</description>
			<content type="html"><![CDATA[<h1 id="test">test</h1>
<h2 id="ブログ始めました">ブログ始めました</h2>
]]></content>
		</item>
		
	</channel>
</rss>
